use crate::app_state::APP_STATE;
use crate::models::message::Message;
use crate::models::payload::Payload;
use crate::models::user::User;
use crate::utils::play_notification_sound;
use std::sync::mpsc::Receiver;
use std::thread;

pub(crate) struct Chat {}

impl Chat {
    pub fn new() -> Self {
        let mut goat = User::new("GoatWithAccordion üêêü™ó");
        let example_messages = vec![
            Message::new(
                &mut goat,
                r#"Click the green "Connect" button (in the top-right corner) to connect.
After connecting, you'll see your address, UTXO count, and balance are updated.
The status in the bottom-left corner will change to "Connected". Enjoy! üöÄ
IMPORTANT:
1) Never send your real Kaspa to anyone under any circumstances. Kaspeak operates exclusively in the testnet environment and uses only test currency. We do not accept donations or require fees for usage. Any real funds sent anywhere will be lost forever!
2) Do not use Kaspeak for transmitting anonymous or confidential information. Do not disclose personal data, schedule meetings, or conduct state affairs. Information transmitted through this service is publicly accessible across the entire test network, and we do not guarantee anonymity."#,
                0,
            ),
            Message::new(
                &mut goat,
                r#"–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∑–µ–ª—ë–Ω—É—é –∫–Ω–æ–ø–∫—É ¬´Connect¬ª (–≤ –ø—Ä–∞–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É), —á—Ç–æ–±—ã –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è.
–ü–æ—Å–ª–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –í—ã —É–≤–∏–¥–∏—Ç–µ, —á—Ç–æ –∞–¥—Ä–µ—Å, —á–∏—Å–ª–æ UTXO –∏ –í–∞—à –±–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–∏–ª–∏—Å—å.
–¢–∞–∫–∂–µ –≤ –Ω–∏–∂–Ω–µ–º –ª–µ–≤–æ–º —É–≥–ª—É —Å—Ç–∞—Ç—É—Å —Å–º–µ–Ω–∏—Ç—Å—è –Ω–∞ ¬´Connected¬ª. –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è! üöÄ
–í–ê–ñ–ù–û:
1) –ù–∏–∫–æ–º—É –∏ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç–µ —Å–≤–æ—é –Ω–∞—Å—Ç–æ—è—â—É—é Kaspa. Kaspeak —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –≤ —Ä–∞–º–∫–∞—Ö —Ç–µ—Å—Ç–Ω–µ—Ç–∞, –∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ —Ç–µ—Å—Ç–æ–≤—É—é –≤–∞–ª—é—Ç—É. –ú—ã –Ω–µ —Å–æ–±–∏—Ä–∞–µ–º –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏—è, –Ω–µ –ø—Ä–æ—Å–∏–º –≤–∑–Ω–æ—Å–æ–≤ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ. –í—Å–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –∫—É–¥–∞-–ª–∏–±–æ –Ω–∞—Å—Ç–æ—è—â–∏–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –±—É–¥—É—Ç —É—Ç—Ä–∞—á–µ–Ω—ã –Ω–∞–≤—Å–µ–≥–¥–∞!
2) –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ Kaspeak –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –∞–Ω–æ–Ω–∏–º–Ω–æ–π –∏ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏. –ù–µ —Ä–∞—Å–∫—Ä—ã–≤–∞–π—Ç–µ —Å–≤–æ–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –Ω–µ –ø–ª–∞–Ω–∏—Ä—É–π—Ç–µ –≤—Å—Ç—Ä–µ—á–∏, –Ω–µ –≤–µ—Ä—à–∏—Ç–µ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–µ –¥–µ–ª–∞. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è, –ø–µ—Ä–µ–¥–∞–Ω–Ω–∞—è –≤ —Ä–∞–º–∫–∞—Ö —Å–µ—Ä–≤–∏—Å–∞, –æ–±—â–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Ä–∞–º–∫–∞—Ö –≤—Å–µ–π —Ç–µ—Å—Ç–æ–≤–æ–π —Å–µ—Ç–∏. –ú—ã —Ç–∞–∫–∂–µ –Ω–µ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –í–∞–º –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç—å."#,
                0,
            ),
        ];
        APP_STATE.chat_state.add_message(0, example_messages[0].clone());
        APP_STATE.chat_state.add_message(0, example_messages[1].clone());
        Self {}
    }

    pub fn subscribe_to_channel(&self, chat_rx: Receiver<Payload>) {
        self.spawn_incoming_messages_thread(chat_rx);
    }

    /// –ü–æ—Ç–æ–∫ –¥–ª—è —á—Ç–µ–Ω–∏—è/–æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    fn spawn_incoming_messages_thread(&self, rx: Receiver<Payload>) {
        thread::spawn(move || {
            log::info!("Incoming message processing thread started");
            for payload in rx {
                //todo –æ–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ —é–∑–µ—Ä–æ–≤ –µ—Å–ª–∏ —é–∑–µ—Ä–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –±—ã–ª–æ
                log::info!("Received text message: {}", String::from_utf8_lossy(payload.get_data()));
                let message = Message::from_payload(payload);
                if let Err(err) = Chat::handle_incoming_message(message) {
                    log::error!("Error while processing message: {}", err);
                }
            }
            log::info!("Incoming message processing thread finished (channel closed).");
        });
    }

    fn handle_incoming_message(message: Message) -> Result<(), String> {
        let channel = message.channel;
        APP_STATE.chat_state.add_message(channel, message);

        APP_STATE.with_listener_state_read(|state| {
            // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∫–∞–Ω–∞–ª–∞
            if state.channel_number == channel {
                thread::spawn(|| match play_notification_sound() {
                    Ok(_) => {}
                    Err(err) => {
                        log::error!("Error while playing notification sound: {}", err)
                    }
                });
            }
        })
    }
}
